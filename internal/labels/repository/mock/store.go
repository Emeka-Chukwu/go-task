// Code generated by MockGen. DO NOT EDIT.
// Source: go-task/internal/labels/repository/postgres (interfaces: Label)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	domain "go-task/domain/label/request"
	domain0 "go-task/domain/label/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLabel is a mock of Label interface.
type MockLabel struct {
	ctrl     *gomock.Controller
	recorder *MockLabelMockRecorder
}

// MockLabelMockRecorder is the mock recorder for MockLabel.
type MockLabelMockRecorder struct {
	mock *MockLabel
}

// NewMockLabel creates a new mock instance.
func NewMockLabel(ctrl *gomock.Controller) *MockLabel {
	mock := &MockLabel{ctrl: ctrl}
	mock.recorder = &MockLabelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabel) EXPECT() *MockLabelMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLabel) Create(arg0 domain.LabelModel) (*domain0.LabelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*domain0.LabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLabelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLabel)(nil).Create), arg0)
}

// CreateTaskLabel mocks base method.
func (m *MockLabel) CreateTaskLabel(arg0 domain.LabelTaskModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTaskLabel indicates an expected call of CreateTaskLabel.
func (mr *MockLabelMockRecorder) CreateTaskLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskLabel", reflect.TypeOf((*MockLabel)(nil).CreateTaskLabel), arg0)
}

// Delete mocks base method.
func (m *MockLabel) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLabelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLabel)(nil).Delete), arg0)
}

// GetByID mocks base method.
func (m *MockLabel) GetByID(arg0 uuid.UUID) (*domain0.LabelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*domain0.LabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLabelMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLabel)(nil).GetByID), arg0)
}

// List mocks base method.
func (m *MockLabel) List() (*[]domain0.LabelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(*[]domain0.LabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLabelMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLabel)(nil).List))
}

// ListByLabel mocks base method.
func (m *MockLabel) ListByLabel() (*[]domain0.LabelTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLabel")
	ret0, _ := ret[0].(*[]domain0.LabelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLabel indicates an expected call of ListByLabel.
func (mr *MockLabelMockRecorder) ListByLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLabel", reflect.TypeOf((*MockLabel)(nil).ListByLabel))
}

// ListByLabelID mocks base method.
func (m *MockLabel) ListByLabelID(arg0 uuid.UUID) (*domain0.LabelTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLabelID", arg0)
	ret0, _ := ret[0].(*domain0.LabelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLabelID indicates an expected call of ListByLabelID.
func (mr *MockLabelMockRecorder) ListByLabelID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLabelID", reflect.TypeOf((*MockLabel)(nil).ListByLabelID), arg0)
}

// Update mocks base method.
func (m *MockLabel) Update(arg0 uuid.UUID, arg1 domain.LabelModel) (*domain0.LabelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain0.LabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLabelMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLabel)(nil).Update), arg0, arg1)
}
