// Code generated by MockGen. DO NOT EDIT.
// Source: go-task/internal/tasks/usecase (interfaces: Taskusecase)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	domain "go-task/domain/task/request"
	tasks "go-task/internal/tasks/usecase"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTaskusecase is a mock of Taskusecase interface.
type MockTaskusecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskusecaseMockRecorder
}

// MockTaskusecaseMockRecorder is the mock recorder for MockTaskusecase.
type MockTaskusecaseMockRecorder struct {
	mock *MockTaskusecase
}

// NewMockTaskusecase creates a new mock instance.
func NewMockTaskusecase(ctrl *gomock.Controller) *MockTaskusecase {
	mock := &MockTaskusecase{ctrl: ctrl}
	mock.recorder = &MockTaskusecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskusecase) EXPECT() *MockTaskusecaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskusecase) CreateTask(arg0 domain.TaskModel) (tasks.ResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(tasks.ResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskusecaseMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskusecase)(nil).CreateTask), arg0)
}

// DeleteTask mocks base method.
func (m *MockTaskusecase) DeleteTask(arg0 uuid.UUID) tasks.ResponseData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(tasks.ResponseData)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskusecaseMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskusecase)(nil).DeleteTask), arg0)
}

// FetchTask mocks base method.
func (m *MockTaskusecase) FetchTask() (tasks.ResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTask")
	ret0, _ := ret[0].(tasks.ResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTask indicates an expected call of FetchTask.
func (mr *MockTaskusecaseMockRecorder) FetchTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTask", reflect.TypeOf((*MockTaskusecase)(nil).FetchTask))
}

// FetchTaskByID mocks base method.
func (m *MockTaskusecase) FetchTaskByID(arg0 context.Context, arg1 uuid.UUID) (tasks.ResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskByID", arg0, arg1)
	ret0, _ := ret[0].(tasks.ResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskByID indicates an expected call of FetchTaskByID.
func (mr *MockTaskusecaseMockRecorder) FetchTaskByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskByID", reflect.TypeOf((*MockTaskusecase)(nil).FetchTaskByID), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockTaskusecase) UpdateTask(arg0 domain.UpdateTaskModel, arg1 uuid.UUID) (tasks.ResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(tasks.ResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskusecaseMockRecorder) UpdateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskusecase)(nil).UpdateTask), arg0, arg1)
}
